---
layout:     post
title:      "《代码整洁之道》 读书笔记"
subtitle:   "细节之中自有天地，整洁成就卓越代码"
date:       2017-05-03 22:00:00
author:     "Wudashan"
header-img: "img/post-bg-clean-code-read-notes.jpg"
catalog: true
tags:
    - 软件工程
    - 读书笔记
    - 编程实践
---


> 保持代码整洁，保证用例覆盖，你会感谢我的。

## 本书结构
本书主要分为三个部分。第一部分1~10章分别从概念、命名、函数、注释、格式、对象与数据结构、错误处理、边界、单元测试、类的角度讲解如何保持代码整洁；第二部分11~13章从系统层面讲解如何保持代码整洁；第三部分14~17章则是从实战的角度对之前所学内容进行演练。

我在看这本书的时候，着重阅读了第一部分和第二部分。第三部分实战演练之所以略过，是因为在书本上长篇幅地看代码效率不高，没有颜色标识，没有方法跳转等等，与其硬吃书上代码，还不如用IDE看流行的开源框架来得过瘾一些。

---

## 第1章 整洁代码
什么是整洁代码？Ron Jeffries认为：

 1. 能通过所有测试；
 2. 没有重复代码（Don't Repeat Yourself）；
 3. 体现系统中的全部设计理念；
 4. 包括尽量少的实体，比如类、方法等。
 
上述这四点，说得简单，要全部做到其实非常困难。就拿第1点来说吧，有时候项目交付时间紧，基本上功能测通就合入代码，很少会在后续补齐测试用例，连测试用例都没有，更别说通过所有测试了。然而不写测试用例就是技术负债，等哪天新人增量开发产生BUG导致线上问题，那就是还债的时候了。

---

## 第2章 有意义的命名

**名副其实。**变量、函数或类的名称应该已经答复了所有的大问题。它该告诉你，它为什么会存在，它做什么事，应该怎么用。如果名称需要注释来补充，那就不算是名副其实。如下代码，第二个变量名比第一个好理解多了。
```
    int d;  // 消逝的时间，以日计
    int elapsedTimeInDays;
```

**避免误导。**别用accountList来指一组账号，除非它真的是List类型，但是直接用accounts不是更好更直接吗？
 
**类名应该是名词或名词短语**。如Customer、WikiPage、Account和AddressParser，避免使用Manager、Processor、Data或Info这样的类名。类名不应当是动词。

**方法名应当是动词或动词短语。**如postPayment、deletePage或save。属性访问器、修改器和断言应该根据其值命名，并依Javabean标准加上get、set或is前缀。

**使用解决方案领域名称**。比如系统中用到了抽象工厂模式，那么给对应的工厂命名为XXXFactroy更有意义。

---

## 第3章 函数

**函数的第一规则是要短小。**第二规则是还要更短小。

**函数应该只做一件事。**做好这件事，只做这一件事。

**函数内的语句要在同一抽象层级上。**如果函数中混杂不同的抽象层级就会使得读者无法判断表达式是基础概念还是细节。

**尽量少的函数参数。**有两个参数的函数要比一元函数的难懂。如果需要三个或者三个以上的参数应该封装成类了。

**分隔指令与询问。**函数要么做什么事，要么回答什么事，但二者不可得兼。

**使用异常替代返回错误码。**使用异常，错误处理代码就能从主路径代码中分离出来，得到简化。

**别重复自己。**如果一段相同或者相似的代码出现了两次，是不是应该重构了。

---

## 第4章 注释

作者认为，有注释的地方基本就宣告着失败。写注释的常见动机之一是糟糕代码的存在。与其花时间编写解释你搞出的糟糕的代码注释，不如花时间清洁那堆糟糕的代码。

其实，我刚开始是不同意作者的观点的。我觉得，是代码就应该有注释，不然其他人怎么看得懂。但是后来作者提出了一个观点，深深地说服了我，那就是**用代码来阐述**。想想看，你是愿意看到这个：
```
// check to see if the employee is eligible for full benefits
if ((employee.flags & HOURLY_FLAG) && (employee.age > 65)) {
    // do something
}
```
还是更愿意看到这个：
```
if (employee.isEligibleForFullBenefits()) {
    // do something
}
```
只要想上那么几秒钟，就能用代码解释你大部分的意图。很多时候，简单到只需要创建一个描述与注释所言同一事物的函数即可。

#### 好注释

当然，有些注释是必须的，也是有利的。不过要记住，唯一真正好的注释是你想办法不去写的注释。下面对好注释进行分类。

**法律信息。**公司代码规范要求编写与法律有关的注释，例如版权和著作申明。

**对意图的解释。**有时注释不仅提供了有关实现的有用信息，而且还提供了某个决定后面的意图。

**阐释。**有时注释把某种晦涩难明的参数或返回值的意义翻译为某种可读形式。

**警示。**警告会出现某种后果。

**放大。**有的代码可能看着有点多余，但编码者当时是有他自己的考虑，这个时候需要注释下这个代码的重要性。避免后面被优化掉。
